FORMAT: 1A
HOST: http://www.3dvortex.com/

# 3dVortex

3dVortex is an API that allows you to use a 3d printing service through HTTP

## Models [/models/]

### List all models [GET /models/{?new_models}{?popular_models}{?name}{?categories}]

+ Parameters
    + new_models: true (boolean, optional) - Get the most recient models
    + popular_models: false (boolean, optional) - Get the most printed models
    + name: ModelName (string, optional) - Filter models by name
    + categories: house (array[string], optional) - Filter models by categories
+ Response 200 (application/json)
    + Body

            {
                "models": {
                            "id": "1",
                            "name": "groot",
                            "category": "house",
                            "privacy": "public",
                            "image" : "",
                            "model" : "",
                            "volumen" : "32"
                }
            }

### Get model [GET /models/{model_id}/]

+ Parameters
    + model_id: 1 (number, required) - Model id
+ Response 200 (application/json)
    + Body

            {
                "id": "1",
                "name": "groot",
                "category": "house",
                "privacy": "public",
                "image" : "",
                "model" : "",
                "volumen" : "32"
            }

+ Response 401 (application/json)
    + Body

            {
              "error": "NOT_AUTHORIZED",
              "message": "You are not authorized to execute the requested action"
            }
+ Response 404
    + Body

            {
              "error": "NOT_FOUND",
              "message": "The requested resource does not exist"
            }

### Create new model [POST /models/]

You will need admin access to create canonic models

+ Request

    + Body

            {
                "name": "groot",
                "category": "house",
                "privacy": "public",
                "model": "https://www.amazon.com/models/1/img/"
            }

    + Headers

            Token: bearer PERSONAL_SESSION_TOKEN

+ Response 201 (application/json)
    + Body

            {
                "id": "1",
                "name": "groot",
                "category": "house",
                "privacy": "public",
                "image" : "",
                "model" : "",
                "volumen" : "32"
            }

+ Response 401 (application/json)
    + Body

            {
              "error": "NOT_AUTHORIZED",
              "message": "You are not authorized to execute the requested action"
            }
+ Response 404
    + Body

            {
              "error": "NOT_FOUND",
              "message": "The requested resource does not exist"
            }



### Update model [PUT /models/{model_id}/]

+ Parameters
    + model_id: 1 (number, required) - Model id
+ Request

    + Body

            {
                "name": "groot",
                "category": "house",
                "privacy": "public"
            }

    + Headers

            Token: bearer PERSONAL_SESSION_TOKEN

+ Response 200 (application/json)
    + Body

            {
                "id": "1",
                "name": "groot",
                "category": "house",
                "privacy": "public",
                "image" : "",
                "model" : "",
                "volumen" : "32"
            }

+ Response 401 (application/json)
    + Body

            {
              "error": "NOT_AUTHORIZED",
              "message": "You are not authorized to execute the requested action"
            }
+ Response 404
    + Body

            {
              "error": "NOT_FOUND",
              "message": "The requested resource does not exist"
            }

### Delete model [DELETE /models/{model_id}/]

+ Parameters
    + model_id: 1 (number, required) - Model id
+ Request

    + Headers

            Token: bearer PERSONAL_SESSION_TOKEN

+ Response 204 (application/json)

+ Response 401 (application/json)
    + Body

            {
              "error": "NOT_AUTHORIZED",
              "message": "You are not authorized to execute the requested action"
            }
+ Response 404
    + Body

            {
              "error": "NOT_FOUND",
              "message": "The requested resource does not exist"
            }


## User Models [/users/{user_id}/models/]

### List all user models [GET /users/{user_id}/models/]

+ Parameters
    + user_id: 1 (string, required) - User Id
+ Request
    + Headers

            Token: bearer PERSONAL_SESSION_TOKEN

+ Response 200 (application/json)
    + Body

            {
                "models": {
                            "id": "1",
                            "name": "groot",
                            "category": "house",
                            "privacy": "public",
                            "image" : "",
                            "model" : "",
                            "volumen" : "32"
                }
            }
+ Response 401 (application/json)
    + Body

            {
              "error": "NOT_AUTHORIZED",
              "message": "You are not authorized to execute the requested action"
            }
+ Response 404
    + Body

            {
              "error": "NOT_FOUND",
              "message": "The requested resource does not exist"
            }

### Create new user model [POST /users/{user_id}/models/]

+ Parameters
    + user_id: 1 (string, required) - User Id
+ Request

    + Body

            {
                "name": "groot",
                "category": "house",
                "privacy": "public",
                "model": "https://www.amazon.com/models/1/img/"
            }

    + Headers

            Token: bearer PERSONAL_SESSION_TOKEN

+ Response 201 (application/json)
    + Body

            {
                "id": "1",
                "name": "groot",
                "category": "house",
                "privacy": "public",
                "image" : "",
                "model" : "",
                "volumen" : "32"
            }

+ Response 401 (application/json)
    + Body

            {
              "error": "NOT_AUTHORIZED",
              "message": "You are not authorized to execute the requested action"
            }
+ Response 404
    + Body

            {
              "error": "NOT_FOUND",
              "message": "The requested resource does not exist"
            }


## Media [/media]

### Update 3d model [POST /media/models/]

This endpoint allow you to upload a 3d model to our s3 bucket, it receives a binary file through the body request with mime type octet-stream

+ Request (application/octet-stream)

    + Headers

            Token: bearer PERSONAL_SESSION_TOKEN

+ Response 200 (application/json)
    + Body

            {
                "model": "https://www.amazon.com/models/1/img/"
            }
+ Response 401 (application/json)
    + Body

            {
              "error": "NOT_AUTHORIZED",
              "message": "You are not authorized to execute the requested action"
            }


## Authentication [/authentication]

### Authentication [POST]

This endpoint allows you to authenticate yourself and get a JWT. This is made through HMAC authentication. The useful life of the JWT is 24 hours.
The password must follow the process above (pseudocode).
- var crytographer = hmac("SHA256", password);
- string secureHash = crytographer.Hash(current_utc_date);
- string hmacHeader = base64(secureHash);


+ Request (application/json)

    + Headers

            Authentication: hmac username:hmacHeader

+ Response 200 (application/json)

    + Body

            {
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
            }
+ Response 401 (application/json)
    + Body

            {
              "error": "NOT_AUTHORIZED",
              "message": "You are not authorized to execute the requested action"
            }


## Materials [/materials/]

### List all materials [GET /materials/]

+ Response 200 (application/json)
    + Body

            {
                "materials": [
                    {
                        "id": "1",
                        "name": "PLA",
                        "description": "This is the description of the material",
                        "price_per_c3:": "12.3",
                    }
                ]
            }

### Get material [GET /materials/{material_id}/]

+ Parameters
    + material_id: 1 (number, required) - Material id
+ Response 200 (application/json)
    + Body

            {
                "id": "1",
                "name": "PLA",
                "description": "This is the description of the material",
                "price_per_c3:": "12.3",
            }

+ Response 404
    + Body

            {
              "error": "NOT_FOUND",
              "message": "The requested resource does not exist"
            }

### Create material [POST /materials/]

You will need admin access to create materials

+ Request

    + Body

            {
                "name": "PLA",
                "description": "This is the description of the material",
                "price_per_c3:": "12.3",
            }

    + Headers

            Token: bearer PERSONAL_SESSION_TOKEN

+ Response 201 (application/json)
    + Body

            {
                "id": "1",
                "name": "PLA",
                "description": "This is the description of the material",
                "price_per_c3:": "12.3",
            }

+ Response 401 (application/json)
    + Body

            {
              "error": "NOT_AUTHORIZED",
              "message": "You are not authorized to execute the requested action"
            }


### Update material [PUT /materials/{material_id}/]

You will need admin access to edit materials

+ Parameters
    + material_id: 1 (number, required) - Material id
+ Request

    + Body

            {
                "name": "PLA",
                "description": "This is the description of the material",
                "price_per_c3:": "12.3",
            }

    + Headers

            Token: bearer PERSONAL_SESSION_TOKEN

+ Response 200 (application/json)
    + Body

            {
                "id": "1",
                "name": "PLA",
                "description": "This is the description of the material",
                "price_per_c3:": "12.3",
            }

+ Response 401 (application/json)
    + Body

            {
              "error": "NOT_AUTHORIZED",
              "message": "You are not authorized to execute the requested action"
            }

+ Response 404
    + Body

            {
              "error": "NOT_FOUND",
              "message": "The requested resource does not exist"
            }

### Delete material [DELETE /materials/{material_id}/]

You will need admin access to edit materials

+ Parameters
    + material_id: 1 (number, required) - Material id
+ Request

    + Headers

            Token: bearer PERSONAL_SESSION_TOKEN

+ Response 204 (application/json)

+ Response 401 (application/json)
    + Body

            {
              "error": "NOT_AUTHORIZED",
              "message": "You are not authorized to execute the requested action"
            }

+ Response 404
    + Body

            {
              "error": "NOT_FOUND",
              "message": "The requested resource does not exist"
            }



# Data Structures

## Model (object)
+ id: 1 (string) - The ID of model
+ name: groot (string) - The name of the model
+ image: https://www.amazon.com/models/1/img/ (string) - The url image of the model
+ model: https://www.amazon.com/models/1/model/ (string) - The url model of the model
+ volumen: 35 (string) - The volume of the model expresed in c3
+ category (enum[string]) - The category of the model
    + Members
        + house
        + to be defined
+ privacy (enum[string]) - The privacy level of the model
    + Members
        + public - Public level
        + private - Private level

## Pagination (object)
+ count: 120 (string) - The total number of objects across all pages
+ number: 1 (string) - The current page number (starts at 1)
+ size: 50 (string) - The number of objects on each page
+ more_items: false (boolean)